"""
creates list of tuples [(leaves,arrives), (leaves, arrives)...]
# 60 + takes is somewhat magic, we just need some overlap to adress buses thata the cross whole hour
"""
def depardie(inter, start, takes) = range(start,60+takes,inter) |> map$(x => (x, x+takes)) |> list


"""
finds sooner bus according to your needle
example: sooner found
#sooner([(47, 88), (50, 85), (59, 75)], (35, 76)) |> print # (59,75)

# example: sooner not found
# sooner([(11, 52), (20, 55), (23, 64), (35, 76), (35, 70), (47, 88), (50, 85), (59, 100)], (5, 40)) |> print  # (5,40)
"""
case def sooner:
    case([(a,b)] + tail, (na, nb) if (a != na) and (b < nb)) = sooner(tail, (a,b))
    case([_] + tail, needle) = sooner(tail, needle)
    case(_,needle) = needle


"""
creates a list of letgo times
example: I should let go from 0:00 to 0:03 -> (0,3), 
WATCH OUT
from 00:54 to 01:03 -> (54,3) --- see preproces_hours
"""
case def letgos:
    case(arr) = letgos(arr, (0,0), [])
    case([tup] + tail, _, letgo if sooner(tail, tup) == tup) = letgos(tail, tup, letgo)
    case([(a,b)]+ tail, (pa,pb), letgo) = letgos(tail, (a % 60, b), letgo + [(pa, a % 60)])
    case(_,_,letgo) = letgo




"""
converts tups to ranges
preprocess so that ranges are inclusive not exclusive 
deals with overlaps (54,3) -> (54,60) (hopefuly its enough)
"""
case def preproces_hours:
    case((a,b) if a > b) = range(a+1,60)
    case((a,b) if a == 0) = range(a,b+1)
    case((a,b)) = range(a+1, b+1)

